import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom';
import Login from './components/Login';
import Register from './components/Register';
import ChatSelector from './components/ChatSelector';
import Messenger from './components/Messenger';
import Feed from './components/Feed';
import Notifications from './components/Notifications';
import Friends from './components/Friends';
import Profile from './components/Profile';
import AdminPanel from './components/AdminPanel';
import Search from './components/Search';
import Fon from '../public/—Ñ–æ–Ω.png';
import Logo from '../public/–õ–æ–≥–æ.png'
import Friend from '../public/friend.png';
import Chat from '../public/chat.png';
import Lenta from '../public/lenta.png';
import Prof from '../public/Profile.png';
import Setting from '../public/settings.png';
import Notification from '../public/nofications.png';
import './App.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function MainApp({ currentUser, activeTab, setActiveTab, sidebarOpen, setSidebarOpen, handleLogout }) {
  const navigate = useNavigate();
  const location = useLocation();
  const [userAvatar, setUserAvatar] = useState(null);
  const [profileUserId, setProfileUserId] = useState(null); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (currentUser?.user_id) {
      loadUserAvatar();
    }
  }, [currentUser]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º
  useEffect(() => {
    const path = location.pathname;
    if (path === '/' || path === '/feed') setActiveTab('feed');
    else if (path === '/chats' || path.startsWith('/chat/')) setActiveTab('messenger');
    else if (path === '/friends') setActiveTab('friends');
    else if (path === '/notifications') setActiveTab('notifications');
    else if (path === '/profile' || path.startsWith('/profile/')) setActiveTab('profile');
    else if (path === '/admin') setActiveTab('admin');
  }, [location.pathname, setActiveTab]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const handleViewProfile = (userId) => {
    setProfileUserId(userId);
    navigate(`/profile/${userId}`);
    setActiveTab('profile');
    setSidebarOpen(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
  const handleViewMyProfile = () => {
    setProfileUserId(null);
    navigate('/profile');
    setActiveTab('profile');
    setSidebarOpen(false);
  };

  const loadUserAvatar = async () => {
    try {
      const response = await fetch(`http://localhost:5001/api/users/${currentUser.user_id}/avatar`);
      if (response.ok) {
        // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL
        setUserAvatar(`http://localhost:5001/api/users/${currentUser.user_id}/avatar?t=${Date.now()}`);
      } else {
        // –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        setUserAvatar(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      setUserAvatar(null);
    }
  };

  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setSidebarOpen(false);
    setProfileUserId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
    switch (tab) {
      case 'feed':
        navigate('/');
        break;
      case 'messenger':
        navigate('/chats');
        break;
      case 'friends':
        navigate('/friends');
        break;
      case 'notifications':
        navigate('/notifications');
        break;
      case 'profile':
        navigate('/profile');
        break;
      case 'admin':
        navigate('/admin');
        break;
      default:
        navigate('/');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
  const renderAvatar = () => {
    if (userAvatar) {
      return (
        <img 
          src={userAvatar} 
          alt="–ê–≤–∞—Ç–∞—Ä" 
          className="user-avatar-image"
          onError={(e) => {
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            e.target.style.display = 'none';
          }}
        />
      );
    }
    
    return (
      <div className="user-avatar-fallback">
        {currentUser.name ? currentUser.name.charAt(0).toUpperCase() : 'U'}
      </div>
    );
  };

  return (
    <div className="app-container">
      {/* –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —à–∞–ø–∫–∞ */}
      <header className="main-header">
        <div className="header-container">
          <div className="header-left">
            <button 
              className="sidebar-toggle"
              onClick={() => setSidebarOpen(!sidebarOpen)}
            >
              <span className="toggle-icon">‚ò∞</span>
              <span className="toggle-text">–ú–µ–Ω—é</span>
            </button>
            <div className="header-brand">
              <a href="#" className="logo">
                <div className="logo-icon"><img src={Logo} alt="" /></div>
                <img className="logo-large" src={Logo} alt="–õ–æ–≥–æ—Ç–∏–ø" />
              </a>
            </div>
            <div className="header-search">
              <Search currentUser={currentUser} />
              <button className="notification-btn" title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è">
                <img className="notification-icon-image" src={Notification} alt="" />
              </button>
            </div>
          </div>

          <div className="header-actions">
            <div className="user-menu">
              <div className="user-item">
                <div className="user-avatar" onClick={handleViewMyProfile} style={{ cursor: 'pointer' }}>
                  {renderAvatar()}
                </div>
                <div className="user-info" onClick={handleViewMyProfile} style={{ cursor: 'pointer' }}>
                  <div className="user-name">{currentUser.name}</div>
                  <div className="user-role">{currentUser.role}</div>
                </div>
              </div>
              
              {currentUser.role === 'admin' && (
                <button 
                  className={`admin-btn ${activeTab === 'admin' ? 'active' : ''}`}
                  onClick={() => handleTabChange('admin')}
                >
                  <span className="admin-icon"><img src={Setting} alt="" /></span>
                  <span>–ê–¥–º–∏–Ω</span>
                </button>
              )}

              <button onClick={handleLogout} className="logout-btn">
                <span className="logout-icon">üö™</span>
                <span>–í—ã–π—Ç–∏</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <div className={`sidebar-overlay ${sidebarOpen ? 'active' : ''}`} 
           onClick={() => setSidebarOpen(false)}>
      </div>
      
      <aside className={`sidebar ${sidebarOpen ? 'active' : ''}`}>
        <div className="sidebar-header">
          <h3>–ù–∞–≤–∏–≥–∞—Ü–∏—è</h3>
          <button 
            className="sidebar-close"
            onClick={() => setSidebarOpen(false)}
          >
            √ó
          </button>
        </div>
        
        <nav className="sidebar-nav">
          <button 
            className={`sidebar-item ${activeTab === 'feed' ? 'active' : ''}`}
            onClick={() => handleTabChange('feed')}
          >
            <span className="sidebar-icon"><img src={Lenta} alt="" /></span>
            <span className="sidebar-label">–õ–µ–Ω—Ç–∞</span>
          </button>
          <button 
            className={`sidebar-item ${activeTab === 'messenger' ? 'active' : ''}`}
            onClick={() => handleTabChange('messenger')}
          >
            <span className="sidebar-icon"><img src={Chat} alt="" /></span>
            <span className="sidebar-label">–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</span>
          </button>
          <button 
            className={`sidebar-item ${activeTab === 'friends' ? 'active' : ''}`}
            onClick={() => handleTabChange('friends')}
          >
            <span className="sidebar-icon"><img src={Friend} alt="" /></span>
            <span className="sidebar-label">–î—Ä—É–∑—å—è</span>
          </button>
          <button 
            className={`sidebar-item ${activeTab === 'profile' ? 'active' : ''}`}
            onClick={handleViewMyProfile}
          >
            <span className="sidebar-icon"><img src={Prof} alt="" /></span>
            <span className="sidebar-label">–ü—Ä–æ—Ñ–∏–ª—å</span>
          </button>
        </nav>
      </aside>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π */}
      <main className="main-content">
        <Routes>
          <Route path="/" element={<Feed currentUser={currentUser} />} />
          <Route path="/feed" element={<Feed currentUser={currentUser} />} />
          <Route path="/chats" element={<ChatSelector currentUser={currentUser} />} />
          <Route path="/chat/:chatId" element={<Messenger currentUser={currentUser} />} />
          <Route 
            path="/friends" 
            element={
              <Friends 
                currentUserId={currentUser.user_id} 
                onViewProfile={handleViewProfile} 
              />
            } 
          />
          <Route path="/notifications" element={<Notifications currentUser={currentUser} />} />
          <Route 
            path="/profile" 
            element={
              <Profile 
                currentUser={currentUser} 
              />
            } 
          />
          <Route 
            path="/profile/:userId" 
            element={
              <Profile 
                currentUser={currentUser} 
              />
            } 
          />
          <Route 
            path="/admin" 
            element={
              currentUser.role === 'admin' 
                ? <AdminPanel currentUser={currentUser} /> 
                : <Navigate to="/" replace />
            } 
          />
          {/* –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </main>
    </div>
  );
}

function App() {
  const [currentUser, setCurrentUser] = useState(null);
  const [showRegister, setShowRegister] = useState(false);
  const [activeTab, setActiveTab] = useState('feed');
  const [socket, setSocket] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showAdminPanel, setShowAdminPanel] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);

  useEffect(() => {
    loadUserFromStorage();
  }, []);

  const loadUserFromStorage = () => {
    try {
      const savedUser = localStorage.getItem('currentUser');
      console.log('Saved user from localStorage:', savedUser);
      
      if (savedUser) {
        const parsedUser = JSON.parse(savedUser);
        console.log('Parsed user:', parsedUser);
        setCurrentUser(parsedUser);
      }
    } catch (error) {
      console.error('Error parsing user from localStorage:', error);
      localStorage.removeItem('currentUser');
    } finally {
      setLoading(false);
    }
  };

  const handleLogin = (user) => {
    console.log('User logged in:', user);
    setCurrentUser(user);
    const userToSave = {
      user_id: user.user_id,
      name: user.name,
      email: user.email,
      role: user.role
    };
    localStorage.setItem('currentUser', JSON.stringify(userToSave));
  };

  const handleRegister = (user) => {
    console.log('User registered:', user);
    setCurrentUser(user);
    const userToSave = {
      user_id: user.user_id,
      name: user.name,
      email: user.email,
      role: user.role
    };
    localStorage.setItem('currentUser', JSON.stringify(userToSave));
  };

  const handleLogout = () => {
    console.log('Logging out...');
    localStorage.removeItem('currentUser');
    setCurrentUser(null);
    setShowAdminPanel(false);
    setSidebarOpen(false);
    setActiveTab('feed');
    if (socket) {
      socket.disconnect();
    }
  };

  if (loading) {
    return (
      <div className="app-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  return (
    <Router>
      <div className="App">
        {/* –§–æ–Ω –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è */}
        <div className="background-overlay">
          <div className="background-image"></div>
          <div className="background-gradient"></div>
        </div>
        
        <Routes>
          {/* –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <Route 
            path="*" 
            element={
              currentUser ? (
                <MainApp 
                  currentUser={currentUser}
                  activeTab={activeTab}
                  setActiveTab={setActiveTab}
                  sidebarOpen={sidebarOpen}
                  setSidebarOpen={setSidebarOpen}
                  handleLogout={handleLogout}
                />
              ) : showRegister ? (
                <Register 
                  onRegister={handleRegister} 
                  onSwitchToLogin={() => setShowRegister(false)}
                />
              ) : (
                <Login 
                  onLogin={handleLogin} 
                  onSwitchToRegister={() => setShowRegister(true)}
                />
              )
            } 
          />
        </Routes>
      </div>
    </Router>
  );
}

export default App;